// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// evalKernelCpp
NumericVector evalKernelCpp(StringMatrix Integrand2, ExpressionVector Integrand2expr, Environment myenvd1, Environment myenvd2, LogicalVector ExistdN, LogicalVector ExistdX, NumericVector gridTime, IntegerVector dimCol, StringVector NameCol, StringVector JumpTimeName);
RcppExport SEXP yuima_evalKernelCpp(SEXP Integrand2SEXP, SEXP Integrand2exprSEXP, SEXP myenvd1SEXP, SEXP myenvd2SEXP, SEXP ExistdNSEXP, SEXP ExistdXSEXP, SEXP gridTimeSEXP, SEXP dimColSEXP, SEXP NameColSEXP, SEXP JumpTimeNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringMatrix >::type Integrand2(Integrand2SEXP);
    Rcpp::traits::input_parameter< ExpressionVector >::type Integrand2expr(Integrand2exprSEXP);
    Rcpp::traits::input_parameter< Environment >::type myenvd1(myenvd1SEXP);
    Rcpp::traits::input_parameter< Environment >::type myenvd2(myenvd2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ExistdN(ExistdNSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ExistdX(ExistdXSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gridTime(gridTimeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dimCol(dimColSEXP);
    Rcpp::traits::input_parameter< StringVector >::type NameCol(NameColSEXP);
    Rcpp::traits::input_parameter< StringVector >::type JumpTimeName(JumpTimeNameSEXP);
    rcpp_result_gen = Rcpp::wrap(evalKernelCpp(Integrand2, Integrand2expr, myenvd1, myenvd2, ExistdN, ExistdX, gridTime, dimCol, NameCol, JumpTimeName));
    return rcpp_result_gen;
END_RCPP
}
// evalKernelCpp2
NumericVector evalKernelCpp2(StringMatrix Integrand2, ExpressionVector Integrand2expr, Environment myenvd1, Environment myenvd2, LogicalVector CondIntensity, StringVector NameCountingVar, StringVector Namecovariates, LogicalVector ExistdN, LogicalVector ExistdX, List gridTime, IntegerVector dimCol, StringVector NameCol, StringVector JumpTimeName);
RcppExport SEXP _yuima_evalKernelCpp2(SEXP Integrand2SEXP, SEXP Integrand2exprSEXP, SEXP myenvd1SEXP, SEXP myenvd2SEXP, SEXP CondIntensitySEXP, SEXP NameCountingVarSEXP, SEXP NamecovariatesSEXP, SEXP ExistdNSEXP, SEXP ExistdXSEXP, SEXP gridTimeSEXP, SEXP dimColSEXP, SEXP NameColSEXP, SEXP JumpTimeNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringMatrix >::type Integrand2(Integrand2SEXP);
    Rcpp::traits::input_parameter< ExpressionVector >::type Integrand2expr(Integrand2exprSEXP);
    Rcpp::traits::input_parameter< Environment >::type myenvd1(myenvd1SEXP);
    Rcpp::traits::input_parameter< Environment >::type myenvd2(myenvd2SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type CondIntensity(CondIntensitySEXP);
    Rcpp::traits::input_parameter< StringVector >::type NameCountingVar(NameCountingVarSEXP);
    Rcpp::traits::input_parameter< StringVector >::type Namecovariates(NamecovariatesSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ExistdN(ExistdNSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ExistdX(ExistdXSEXP);
    Rcpp::traits::input_parameter< List >::type gridTime(gridTimeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dimCol(dimColSEXP);
    Rcpp::traits::input_parameter< StringVector >::type NameCol(NameColSEXP);
    Rcpp::traits::input_parameter< StringVector >::type JumpTimeName(JumpTimeNameSEXP);
    rcpp_result_gen = Rcpp::wrap(evalKernelCpp2(Integrand2, Integrand2expr, myenvd1, myenvd2, CondIntensity, NameCountingVar, Namecovariates, ExistdN, ExistdX, gridTime, dimCol, NameCol, JumpTimeName));
    return rcpp_result_gen;
END_RCPP
}
// W1
double W1(NumericMatrix crossdx, NumericMatrix b, NumericMatrix A, double h);
RcppExport SEXP yuima_W1(SEXP crossdxSEXP, SEXP bSEXP, SEXP ASEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type crossdx(crossdxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(W1(crossdx, b, A, h));
    return rcpp_result_gen;
END_RCPP
}
// W2
double W2(NumericMatrix dx, NumericMatrix b, double h);
RcppExport SEXP yuima_W2(SEXP dxSEXP, SEXP bSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(W2(dx, b, h));
    return rcpp_result_gen;
END_RCPP
}
// sqnorm
double sqnorm(NumericVector x);
RcppExport SEXP yuima_sqnorm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sqnorm(x));
    return rcpp_result_gen;
END_RCPP
}
// makeprop
NumericVector makeprop(NumericVector mu, NumericVector sample, NumericVector low, NumericVector up);
RcppExport SEXP _yuima_makeprop(SEXP muSEXP, SEXP sampleSEXP, SEXP lowSEXP, SEXP upSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type low(lowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    rcpp_result_gen = Rcpp::wrap(makeprop(mu, sample, low, up));
    return rcpp_result_gen;
END_RCPP
}
// Irregular_PseudoLoglik_COG
double Irregular_PseudoLoglik_COG(int lengthObs, arma::mat B, arma::mat Btilde, arma::mat InvBtilde, double a0, double bq, double a1, double V, double PseudologLik, arma::rowvec ta, arma::colvec state, arma::colvec stateMean, arma::colvec e, arma::vec DeltaG2, arma::vec Deltat);
RcppExport SEXP yuima_Irregular_PseudoLoglik_COG(SEXP lengthObsSEXP, SEXP BSEXP, SEXP BtildeSEXP, SEXP InvBtildeSEXP, SEXP a0SEXP, SEXP bqSEXP, SEXP a1SEXP, SEXP VSEXP, SEXP PseudologLikSEXP, SEXP taSEXP, SEXP stateSEXP, SEXP stateMeanSEXP, SEXP eSEXP, SEXP DeltaG2SEXP, SEXP DeltatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type lengthObs(lengthObsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Btilde(BtildeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type InvBtilde(InvBtildeSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type bq(bqSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type PseudologLik(PseudologLikSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type ta(taSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type state(stateSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type stateMean(stateMeanSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type DeltaG2(DeltaG2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Deltat(DeltatSEXP);
    rcpp_result_gen = Rcpp::wrap(Irregular_PseudoLoglik_COG(lengthObs, B, Btilde, InvBtilde, a0, bq, a1, V, PseudologLik, ta, state, stateMean, e, DeltaG2, Deltat));
    return rcpp_result_gen;
END_RCPP
}
// detcpp
double detcpp(NumericMatrix A);
RcppExport SEXP _yuima_detcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(detcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// Smake
NumericMatrix Smake(NumericVector b, int d);
RcppExport SEXP yuima_Smake(SEXP bSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Smake(b, d));
    return rcpp_result_gen;
END_RCPP
}
// solvecpp
NumericMatrix solvecpp(NumericMatrix A);
RcppExport SEXP yuima_solvecpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(solvecpp(A));
    return rcpp_result_gen;
END_RCPP
}
// sub_f
double sub_f(NumericMatrix S, NumericVector b);
RcppExport SEXP yuima_sub_f(SEXP SSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_f(S, b));
    return rcpp_result_gen;
END_RCPP
}
// likndim
double likndim(NumericMatrix dx, NumericMatrix b, NumericMatrix A, double h);
RcppExport SEXP yuima_likndim(SEXP dxSEXP, SEXP bSEXP, SEXP ASEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(likndim(dx, b, A, h));
    return rcpp_result_gen;
END_RCPP
}
