require(Rcpp)
require(RcppArmadillo)
debugSource('~/YUIMA/yuima/yuima/R/asymptotic_term_third.R', echo=TRUE)
require(yuima)
debugSource('~/YUIMA/yuima/yuima/R/asymptotic_term_third.R', echo=TRUE)
# to the Black-Scholes economy:
# dXt^e = Xt^e * dt + e * Xt^e * dWt
diff.matrix <- "x*e"
model <- setModel(drift = "x", diffusion = diff.matrix)
# call option is evaluated by averating
# max{ (1/T)*int_0^T Xt^e dt, 0}, the first argument is the functional of interest:
Terminal <- 1
xinit <- c(1)
f <- list( c(expression(x/Terminal)), c(expression(0)))
F <- 0
division <- 1000
e <- 4
yuima <- setYuima(model = model, sampling = setSampling(Terminal=Terminal, n=division))
yuima <- setFunctional( yuima, xinit=xinit, f=f,F=F,e=e)
g <- function(x) get_ge(x,epsilon=e,K=1,F0=F0)
set.seed(123)
asymp <- asymptotic_term(yuima, block=10, rho,g)
debug(getf)
yuima@functional
source('~/YUIMA/yuima/yuima/R/asymptotic_term_third_function.R', echo=TRUE)
asymp <- asymptotic_term(yuima, block=10, rho,g)
source('~/YUIMA/yuima/yuima/R/simFunctional.R', echo=TRUE)
asymp <- asymptotic_term(yuima, block=10, rho,g)
X.t0
plot(X.t0)
expand.var
yuima
yuima@data
yuima@model
yuima@model@drift
yuima@model@diffusion
e
yuima@model@xinit
division
delta
dx.drift
de.drift
dede.drift
dx.diffusion
Y
plot(Y)
plot(Y)
get_e_f0
mu
sigma
Sigma
